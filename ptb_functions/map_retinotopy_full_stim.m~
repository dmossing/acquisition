function [xpos,ypos] = map_retinotopy_full_stim(ratio,orientations,DScreen,...
    ScreenType,gratingSize,spFreq,tFreq,numlocs)

if nargin<2 || isempty(orientations)
    orientations = 0:45:315;
end
if nargin<3 || isempty(DScreen)
    DScreen = 15;
end
if nargin<4 || isempty(ScreenType)
    ScreenType = 'monitor';
end
if nargin<5 || isempty(gratingSize)
    gratingSize = 15;
end
if nargin<6 || isempty(spFreq)
    spFreq = 0.04;
end
if nargin<7 || isempty(tFreq)
    tFreq = 2;
end
if nargin<8 || isempty(numlocs)
    numlocs = 3;
end

% set up DAQ

daq=daq.createSession('ni');
addDigitalChannel(daq,'Dev3','port0/line0','OutputOnly'); % stim trigger
addDigitalChannel(daq,'Dev3','port0/line1','OutputOnly'); % projector LED on
addDigitalChannel(daq,'Dev3','port0/line2','OutputOnly'); % complete stim protocol, move in z

outputSingleScan(daq,[0 0 0]);

frameRate = 60;     % Hz
assert(strcmp(ScreenType,'projector') || strcmp(ScreenType,'monitor'));
if strcmp(ScreenType,'projector')
    xRes = 1024; yRes = 768;
    VertCRTSize = 13;
else
    xRes = 1280; yRes = 1024;
    VertCRTSize = 27;
end

Bcol = 128;
screenInfo = genscreenInfo(xRes,yRes,VertCRTSize,DScreen,frameRate,Bcol);
window = screenInfo.window;
try
    
    locs = tileScreen(gratingSize,screenInfo);
    [ny,nx,~] = size(locs);
    nori = numel(orientations);
    [indy,indx,indo] = meshgrid(1:ny,1:nx,1:nori);
    order = randperm(ny*nx*nori);
    locinds = [indy(order) indx(order)];
    nCycles = 1;
    numFrames=ceil(nCycles*frameRate/tFreq);
    sizeGrating = ceil(gratingSize*screenInfo.PixperDeg);
    for j = 1:nori
        gratingInfo = gengratingInfo(gratingSize,spFreq,tFreq,orientations(j));
        for i = 1:numFrames
            gratingFrame(i,j) = gengratingFrame(i,gratingInfo,screenInfo);
        end
        for k = 1:ratio*numFrames
            gratingFrame(numFrames+k,j) = gensolidFrame(screenInfo,sizeGrating);
        end
    end
    % generate gray frames for baseline acquisition
    for j = 1:nori
        for i = 1:numFrames
            blankFrame(i,j) = gensolidFrame(screenInfo);
        end
        for k = 1:ratio*numFrames
            blankFrame(numFrames+k,j) = gensolidFrame(screenInfo);
        end
    end
    
    outputSingleScan(daq,[0 1 0])
    outputSingleScan(daq,[1 1 0])
    outputSingleScan(daq,[0 1 0])
    
    gratingRect = [0 0 sizeGrating sizeGrating]; % The bounding box for our animated sprite
    oriIndex = 1;
    blankFrameIndex = 1;
    buttons = 0; % When the user clicks the mouse, 'buttons' becomes nonzero.
    mX = 0; % The x-coordinate of the mouse cursor
    mY = 0; % The y-coordinate of the mouse cursor
    % Draw the sprite at the new location.
    while oriIndex <= nori
        Screen('DrawTexture', window, blankFrame(blankFrameIndex,oriIndex), [0 0 1 1], CenterRectOnPoint([0 0 1 1], mX, mY));
        % Call Screen('Flip') to update the screen.  Note that calling
        % 'Flip' after we have both erased and redrawn the sprite prevents
        % the sprite from flickering.
        Screen('Flip', window);
        
        blankFrameIndex = blankFrameIndex + 1;
        if blankFrameIndex > (ratio+1)*numFrames
            blankFrameIndex = 1;
            oriIndex = oriIndex + 1;
        end
    end
    
    outputSingleScan(daq,[0 1 0])
    outputSingleScan(daq,[1 1 0])
    outputSingleScan(daq,[0 1 0])
    
    %     numlocs = 5;
    
    % Exit the demo as soon as the user presses a mouse button.
    for i=1:numel(order)
            % ------ Bookkeeping Variables ------
            
            gratingRect = [0 0 sizeGrating sizeGrating]; % The bounding box for our animated sprite
            gratingFrameIndex = 1; % Which frame of the animation should we show?
            oriIndex = 1;
            % We need to redraw the text or else it will disappear after a
            % subsequent call to Screen('Flip').
            Screen('DrawText', window, 'Click to exit', 0, 0, screenInfo.blI);
            
            % Draw the sprite at the new location.
            Screen('DrawTexture', window, gratingFrame(gratingFrameIndex,oriIndex), gratingRect, CenterRectOnPoint(gratingRect, mX, mY));
            % Call Screen('Flip') to update the screen.  Note that calling
            % 'Flip' after we have both erased and redrawn the sprite prevents
            % the sprite from flickering.
            Screen('Flip', window);
            
            gratingFrameIndex = gratingFrameIndex + 1;
            if gratingFrameIndex > (ratio+1)*numFrames
                gratingFrameIndex = 1;
                oriIndex = oriIndex + 1;
                if oriIndex > nori
                    oriIndex = 1;
                end
            end
            outputSingleScan(daq,[0 1 0])
            outputSingleScan(daq,[1 1 0])
            outputSingleScan(daq,[0 1 0])
            pause(1)
    end
    
    for i=1:10
        outputSingleScan(daq,[0 1 0])
        outputSingleScan(daq,[1 1 0])
        outputSingleScan(daq,[0 1 0])
    end
    
    
    % Revive the mouse cursor.
    ShowCursor;
    PixperDeg = screenInfo.PixperDeg;
    xpos = round((mX-xRes/2)/PixperDeg)
    ypos = round((yRes/2-mY)/PixperDeg)
    
    % Close screen
    Screen('CloseAll');
    
    % Restore preferences
    Screen('Preference', 'VisualDebugLevel', screenInfo.oldVisualDebugLevel);
    Screen('Preference', 'SuppressAllWarnings', screenInfo.oldSupressAllWarnings);
    
catch
    disp('error')
    % If there is an error in our try block, let's
    % return the user to the familiar MATLAB prompt.
    ShowCursor;
    Screen('CloseAll');
    Screen('Preference', 'VisualDebugLevel', screenInfo.oldVisualDebugLevel);
    Screen('Preference', 'SuppressAllWarnings', screenInfo.oldSupressAllWarnings);
    psychrethrow(psychlasterror);
    
    for i=1:10
        outputSingleScan(daq,[0 1 0])
        outputSingleScan(daq,[1 1 0])
        outputSingleScan(daq,[0 1 0])
    end
    
end